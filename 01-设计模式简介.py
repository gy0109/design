"""设计模式简介"""
"""
面向对象编程: 函数的作用就是处理属性

1, 对象: 开发程序中的实体
2, 类 : 像模板一样,易用,定义属性和行为: 属性--数据  行为--函数  含有构造函数 为对象提供初始化
3, 方法: 对象的行为, 对属性进行处理 从未实现所需功能
"""

"""
面向对象编程的主要概念: 

1, 封装: 行为对外私密不可见, 根据客户端发送请求不同调用不同的函数实现改变内部状态,无关键字,不隐秘
2, 继承: 可以继承父类的大部分功能, 可以实现扩充和修改父类方法, 多重继承实现多层次功能结构(一子多父)
3, 多态: 参数不同实现方式不同, 不同对象可以调用同一方法, python的内置功能
4, 抽象: 将复杂的过程抽象为一个简单的接口,通过调用接口可以实现直接与类内部的方法和属性进行交互!
5, 组合: 将对象或类组合到一起实现更复杂的数据结构, 多类或多对象一起使用,无需继承便可以实现跨模块功能合集
"""

"""
面向对象的设计原则:

1,开放封闭原则: 扩展--开放  修改--封闭 通用的开发思想(能扩展就不要修改) 
              保持代码的向后兼容性,现在的类不会被修改,退化的可能性比较小
2,控制反转原则: 高层次不应该依赖低层次,而是都应该依赖与抽象, 细节依赖抽象(接口) 基本模块和从属模块之间应提供一个接口进行藕合
              消除了模块之间的紧耦合和系统之间的复杂性和刚性, 依赖模块之间有一层明确的钩子或者参数组成的抽象层便于处理模块之间的依赖关系
3,接口隔离原则: 客户端不依赖他们不需要的接口 (实现接口单一职责,不相互牵带    '瘦身型接口' 并是方法与其紧密相关)
4,单一职责原则: 类的职责单一,修改的原因单一  特定的类需要修改 其他无需改动 (避免出现一个类多种功能,修改原因有很多)
5,替换原则:    派生类必须完全取代基类,  (父与子必共存, 子与父可不共存)  -- 与开放封闭原则基本共存
"""

"""
设计模式的概念: 与语言无关,多语言实现, 动态,可定制

1,设计模式的优点:多个项目重复使用, 在架构级别便可解决问题,可靠性和依赖性
2,设计模式的分类:特殊用途的代码段,某个问题的解决方案(设计思路), 某类问题的通用解决方案(标准), 经过时间考验,高效,可扩展的解决一类问题的(模式)
3,上下文-设计模式的适用性: 参与者:类 非功能需要者:内存优化,可用性能等方面的需求  权衡: 权衡是否适用 结果:上下文不合适会出现其他代码出现负面问题
"""

"""
动态语言的设计模式: 

1,类或者类型是运行的对象
2,变量在创建时就被赋予类型 并且可更改
3,动态语言具有灵活性
4,多态是内置的,不需要关键字来声明
"""


"""
模式的分类:

1,创建型模式:运行机制基于对象的创建方式,将对象与创建的细节分割,代码与创建对象的类型无关
2,结构型模式:组合可以实现对象之间的强大功能,简化结构实现类和对象之间的关系,类的继承和组合
3,行为型模式:对象之间的交互和响应,保持松散耦合
"""

